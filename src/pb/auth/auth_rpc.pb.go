// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/auth/auth_rpc.proto

package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginParam struct {
	Account              string   `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginParam) Reset()         { *m = LoginParam{} }
func (m *LoginParam) String() string { return proto.CompactTextString(m) }
func (*LoginParam) ProtoMessage()    {}
func (*LoginParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_rpc_fe0a50fcc1ae47c7, []int{0}
}
func (m *LoginParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginParam.Unmarshal(m, b)
}
func (m *LoginParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginParam.Marshal(b, m, deterministic)
}
func (dst *LoginParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginParam.Merge(dst, src)
}
func (m *LoginParam) XXX_Size() int {
	return xxx_messageInfo_LoginParam.Size(m)
}
func (m *LoginParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginParam.DiscardUnknown(m)
}

var xxx_messageInfo_LoginParam proto.InternalMessageInfo

func (m *LoginParam) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginParam) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginRet struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	UserId               int32    `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRet) Reset()         { *m = LoginRet{} }
func (m *LoginRet) String() string { return proto.CompactTextString(m) }
func (*LoginRet) ProtoMessage()    {}
func (*LoginRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_auth_rpc_fe0a50fcc1ae47c7, []int{1}
}
func (m *LoginRet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRet.Unmarshal(m, b)
}
func (m *LoginRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRet.Marshal(b, m, deterministic)
}
func (dst *LoginRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRet.Merge(dst, src)
}
func (m *LoginRet) XXX_Size() int {
	return xxx_messageInfo_LoginRet.Size(m)
}
func (m *LoginRet) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRet.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRet proto.InternalMessageInfo

func (m *LoginRet) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LoginRet) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginParam)(nil), "auth.LoginParam")
	proto.RegisterType((*LoginRet)(nil), "auth.LoginRet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginParam, opts ...grpc.CallOption) (*LoginRet, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginParam, opts ...grpc.CallOption) (*LoginRet, error) {
	out := new(LoginRet)
	err := c.cc.Invoke(ctx, "/auth.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Login(context.Context, *LoginParam) (*LoginRet, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/auth/auth_rpc.proto",
}

func init() { proto.RegisterFile("pb/auth/auth_rpc.proto", fileDescriptor_auth_rpc_fe0a50fcc1ae47c7) }

var fileDescriptor_auth_rpc_fe0a50fcc1ae47c7 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x48, 0xd2, 0x4f,
	0x2c, 0x2d, 0xc9, 0x00, 0x13, 0xf1, 0x45, 0x05, 0xc9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x2c, 0x20, 0xbe, 0x92, 0x13, 0x17, 0x97, 0x4f, 0x7e, 0x7a, 0x66, 0x5e, 0x40, 0x62, 0x51, 0x62,
	0xae, 0x90, 0x04, 0x17, 0xbb, 0x63, 0x72, 0x72, 0x7e, 0x69, 0x5e, 0x89, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x8c, 0x2b, 0x24, 0xc5, 0xc5, 0x11, 0x90, 0x58, 0x5c, 0x5c, 0x9e, 0x5f, 0x94,
	0x22, 0xc1, 0x04, 0x96, 0x82, 0xf3, 0x95, 0x2c, 0xb8, 0x38, 0xc0, 0x66, 0x04, 0xa5, 0x96, 0x08,
	0x89, 0x70, 0xb1, 0xba, 0x16, 0x15, 0xe5, 0x17, 0x41, 0xf5, 0x43, 0x38, 0x42, 0x62, 0x5c, 0x6c,
	0xa1, 0xc5, 0xa9, 0x45, 0x9e, 0x10, 0xbd, 0xac, 0x41, 0x50, 0x9e, 0x91, 0x31, 0x17, 0x8b, 0x63,
	0x69, 0x49, 0x86, 0x90, 0x36, 0x17, 0x2b, 0xd8, 0x04, 0x21, 0x01, 0x3d, 0x90, 0xab, 0xf4, 0x10,
	0x4e, 0x92, 0xe2, 0x43, 0x12, 0x09, 0x4a, 0x2d, 0x51, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xdf, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x44, 0xf8, 0x24, 0xd9, 0x00, 0x00, 0x00,
}
